import logging
import os
import requests
from datetime import datetime
from io import BytesIO

from sqlalchemy import select
from sqlalchemy.orm import joinedload
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, LabeledPrice, Update
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    PreCheckoutQueryHandler,
    filters,
)

from models.database import get_db
import models

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TELEGRAM_TOKEN")
BASE_IMAGE_URL = os.getenv("BASE_IMAGE_URL", "http://localhost:8000/static/")
BASE_FLOWER_URL = os.getenv("BASE_FLOWER_URL", "http://127.0.0.1:3000/catalog.html?flower_id=")
DEBUG_MODE = os.getenv("DEBUG_MODE", "True").lower() in ("true", "1", "yes")
OWNER_IDS = [int(id.strip()) for id in os.getenv("OWNER_IDS", "5078575051,5078575052").split(",")]

if not TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

def buy_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã."""
    keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Telegram Stars", callback_data="pay")]]
    if DEBUG_MODE:
        keyboard.append([InlineKeyboardButton("üõ† –¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ (Debug)", callback_data="debug_pay")])
    return InlineKeyboardMarkup(keyboard)

def confirm_quantity_keyboard(cart_item_id: int, available_quantity: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞."""
    keyboard = [
        [
            InlineKeyboardButton(
                f"‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å {available_quantity} —à—Ç.",
                callback_data=f"confirm_{cart_item_id}_{available_quantity}",
            )
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")],
    ]
    return InlineKeyboardMarkup(keyboard)

def download_image(url: str) -> BytesIO | None:
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL."""
    try:
        response = requests.get(url)
        if response.status_code == 200:
            return BytesIO(response.content)
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {url}, —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {url}: {e}")
        return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º user_id."""
    user_id = context.args[0] if context.args else None
    if not user_id:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
        return

    try:
        user_id = int(user_id)
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    async for db in get_db():
        result = await db.execute(
            select(models.CartItem)
            .options(joinedload(models.CartItem.flower).joinedload(models.Flower.images))
            .where(models.CartItem.user_id == user_id)
        )
        cart_items = result.unique().scalars().all()

        if not cart_items:
            await update.message.reply_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return

        total_price = 0
        cart_details = f"üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ (ID: {user_id})</b> üõí\n\n"
        media: list[InputMediaPhoto] = []

        for item in cart_items:
            flower = item.flower
            item_total = flower.price * item.quantity
            total_price += item_total

            cart_details += (
                f"üå∏ <b>{flower.name}</b>\n"
                f"  üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {flower.category}\n"
                f"  üìè –†–∞–∑–º–µ—Ä: {flower.size}\n"
                f"  üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity} —à—Ç.\n"
                f"  üí∞ –¶–µ–Ω–∞ –∑–∞ —à—Ç: {flower.price} RUB\n"
                f"  üè∑Ô∏è –ò—Ç–æ–≥–æ: {item_total} RUB\n"
                f"  üîó <a href='{BASE_FLOWER_URL}{flower.id}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n"
                "----------------------------------------\n"
            )

            if flower.images:
                image_path = flower.images[0].image_path
                image_url = f"{BASE_IMAGE_URL}{image_path}"
                image_file = download_image(image_url)
                if image_file:
                    media.append(InputMediaPhoto(media=image_file, caption=flower.name))
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {flower.name}")

        total_stars = int(total_price / 10)
        cart_details += (
            f"üíµ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {total_price} RUB ({total_stars} Stars)\n"
            "----------------------------------------\n"
            "üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å:"
        )

        if media:
            try:
                await context.bot.send_media_group(chat_id=update.message.chat_id, media=media)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {e}")
                await update.message.reply_text(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–ø–ª–∞—Ç—É."
                )

        await update.message.reply_text(
            cart_details,
            parse_mode="HTML",
            reply_markup=buy_keyboard(),
            disable_web_page_preview=True,
        )
        context.user_data["user_id"] = user_id
        context.user_data["cart_items"] = cart_items

async def notify_owners(
    context: ContextTypes.DEFAULT_TYPE, user_id: int, cart_items: list[models.CartItem], order_id: str, debug: bool = False
) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ."""
    async for db in get_db():
        result = await db.execute(
            select(models.User)
            .options(joinedload(models.User.profile))
            .where(models.User.id == user_id)
        )
        user = result.scalars().first()
        profile = user.profile if user else None

        refreshed_cart_items = []
        for item in cart_items:
            cart_result = await db.execute(
                select(models.CartItem)
                .options(joinedload(models.CartItem.flower))
                .where(models.CartItem.id == item.id)
            )
            refreshed_item = cart_result.scalars().first()
            if refreshed_item:
                refreshed_cart_items.append(refreshed_item)

        order_details = (
            f"üîî <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}</b> üîî\n"
            f"{'üõ† –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ (Debug)' if debug else 'üí≥ –†–µ–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑'}\n\n"
            f"üë§ <b>–û—Ç –∫–æ–≥–æ:</b> {user.name if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: {user_id})\n"
            f"üìß <b>Email:</b> {user.email if user else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {profile.address if profile and profile.address else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {profile.phone if profile and profile.phone else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"‚úàÔ∏è <b>Telegram:</b> {profile.telegram if profile and profile.telegram else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"üõí <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n"
        )

        total_price = 0
        for item in refreshed_cart_items:
            flower = item.flower
            item_total = flower.price * item.quantity
            total_price += item_total
            order_details += (
                f"üå∏ {flower.name}\n"
                f"  üî¢ –ö–æ–ª-–≤–æ: {item.quantity} —à—Ç.\n"
                f"  üí∞ –¶–µ–Ω–∞: {item_total} RUB\n"
                "----------------------------------------\n"
            )

        total_stars = int(total_price / 10)
        order_details += (
            f"üíµ <b>–ò—Ç–æ–≥–æ:</b> {total_price} RUB ({total_stars} Stars)\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}\n"
        )

        for owner_id in OWNER_IDS:
            try:
                await context.bot.send_message(chat_id=owner_id, text=order_details, parse_mode="HTML")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}: {e}")

async def notify_user(context: ContextTypes.DEFAULT_TYPE, user_id: int, order_id: str) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ."""
    async for db in get_db():
        result = await db.execute(
            select(models.User)
            .options(joinedload(models.User.profile))
            .where(models.User.id == user_id)
        )
        user = result.scalars().first()
        if user and user.profile and user.profile.telegram:
            try:
                await context.bot.send_message(
                    chat_id=user.profile.telegram,
                    text=f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ–ø–ª–∞—á–µ–Ω. –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏.",
                    parse_mode="HTML",
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def check_quantity_and_pay(update: Update, context: ContextTypes.DEFAULT_TYPE, debug: bool = False) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ (–∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è debug)."""
    query = update.callback_query
    await query.answer()

    user_id = context.user_data.get("user_id")
    if not user_id or not isinstance(user_id, int):
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
        return

    async for db in get_db():
        result = await db.execute(
            select(models.CartItem)
            .options(joinedload(models.CartItem.flower))
            .where(models.CartItem.user_id == user_id)
        )
        current_cart_items = result.unique().scalars().all()

        if not current_cart_items:
            await query.message.reply_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            return

        insufficient_items = []
        total_price = 0

        for item in current_cart_items:
            flower = item.flower
            if item.quantity > flower.quantity:
                insufficient_items.append((item, flower.quantity))
            else:
                total_price += flower.price * item.quantity

        if insufficient_items:
            for item, available_quantity in insufficient_items:
                flower = item.flower
                message = (
                    f"‚ö†Ô∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ</b> ‚ö†Ô∏è\n\n"
                    f"üå∏ <b>{flower.name}</b>\n"
                    f"üî¢ –í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ: {item.quantity} —à—Ç.\n"
                    f"üì¶ –ù–∞ —Å–∫–ª–∞–¥–µ: {available_quantity} —à—Ç.\n\n"
                    f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —Å–∫–ª–∞–¥–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ {available_quantity} —à—Ç. —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, "
                    f"–∞ —É –≤–∞—Å –≤ –∫–æ—Ä–∑–∏–Ω–µ {item.quantity}. –ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã, –º—ã –º–æ–∂–µ–º –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ {available_quantity} —à—Ç.\n\n"
                    f"üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                )
                await query.message.reply_text(
                    message,
                    parse_mode="HTML",
                    reply_markup=confirm_quantity_keyboard(item.id, available_quantity),
                )
            return

        order_id = f"{user_id}_{int(datetime.utcnow().timestamp())}"
        context.user_data["order_id"] = order_id
        context.user_data["cart_items"] = current_cart_items

        if debug:
            for item in current_cart_items:
                flower = item.flower
                purchase = models.Purchase(
                    user_id=user_id,
                    flower_id=flower.id,
                    quantity=item.quantity,
                    total_price=flower.price * item.quantity,
                    purchase_date=datetime.utcnow(),
                )
                db.add(purchase)
                flower.quantity -= item.quantity
                await db.delete(item)
            await db.commit()

            await notify_owners(context, user_id, current_cart_items, order_id, debug=True)
            await notify_user(context, user_id, order_id)
            await query.message.reply_text(
                f"üõ† <b>–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞ (Debug Mode)!</b>\n"
                f"–ó–∞–∫–∞–∑ #{order_id} –æ–ø–ª–∞—á–µ–Ω.\n"
                f"–ü–æ–∫—É–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏–∏, –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üåü",
                parse_mode="HTML",
            )
        else:
            total_stars = int(total_price / 10)
            await context.bot.send_invoice(
                chat_id=query.message.chat_id,
                title=f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id}",
                description="–ü–æ–∫—É–ø–∫–∞ —Ü–≤–µ—Ç–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã",
                payload=f"cart_{user_id}",
                provider_token="",
                currency="XTR",
                prices=[LabeledPrice("–ö–æ—Ä–∑–∏–Ω–∞", total_stars)],
            )

async def pay(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã."""
    await check_quantity_and_pay(update, context, debug=False)

async def debug_pay(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã (debug)."""
    await check_quantity_and_pay(update, context, debug=True)

async def confirm_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞."""
    query = update.callback_query
    await query.answer()

    data = query.data.split("_")
    if data[0] == "confirm":
        cart_item_id = int(data[1])
        new_quantity = int(data[2])

        async for db in get_db():
            try:
                result = await db.execute(
                    select(models.CartItem)
                    .options(joinedload(models.CartItem.flower))
                    .where(models.CartItem.id == cart_item_id)
                )
                cart_item = result.scalars().first()

                if not cart_item:
                    await query.message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                        parse_mode="HTML",
                    )
                    return

                flower_name = cart_item.flower.name
                cart_item.quantity = new_quantity
                await db.commit()

                user_id = context.user_data.get("user_id")
                if not user_id or not isinstance(user_id, int):
                    await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                result = await db.execute(
                    select(models.CartItem)
                    .options(joinedload(models.CartItem.flower))
                    .where(models.CartItem.user_id == user_id)
                )
                context.user_data["cart_items"] = result.unique().scalars().all()

                await query.message.reply_text(
                    f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤ –∫–æ—Ä–∑–∏–Ω–µ {new_quantity} —à—Ç. {flower_name}.\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–ª–∞—Ç—É.",
                    parse_mode="HTML",
                    reply_markup=buy_keyboard(),
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
                await query.message.reply_text(
                    "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode="HTML",
                )
    elif query.data == "cancel":
        await query.message.reply_text("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

async def pre_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞."""
    query = update.pre_checkout_query
    await context.bot.answer_pre_checkout_query(query.id, ok=True)

async def process_payment(context: ContextTypes.DEFAULT_TYPE, user_id: int, cart_items: list[models.CartItem], order_id: str, debug: bool = False) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫, –æ—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    async for db in get_db():
        refreshed_cart_items = []
        for item in cart_items:
            result = await db.execute(
                select(models.CartItem)
                .options(joinedload(models.CartItem.flower))
                .where(models.CartItem.id == item.id)
            )
            refreshed_item = result.scalars().first()
            if refreshed_item:
                refreshed_cart_items.append(refreshed_item)

        for item in refreshed_cart_items:
            flower = item.flower
            purchase = models.Purchase(
                user_id=user_id,
                flower_id=flower.id,
                quantity=item.quantity,
                total_price=flower.price * item.quantity,
                purchase_date=datetime.utcnow(),
            )
            db.add(purchase)
            flower.quantity -= item.quantity
            await db.delete(item)
        await db.commit()

        await notify_owners(context, user_id, refreshed_cart_items, order_id, debug)
        await notify_user(context, user_id, order_id)

async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Telegram Stars."""
    payment = update.message.successful_payment
    user_id = int(payment.invoice_payload.split("_")[1])
    order_id = context.user_data.get("order_id")
    cart_items = context.user_data.get("cart_items")

    if not order_id or not cart_items:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start.",
            parse_mode="HTML",
        )
        return

    await process_payment(context, user_id, cart_items, order_id, debug=False)

    await update.message.reply_text(
        f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n"
        f"–ó–∞–∫–∞–∑ #{order_id} –æ–ø–ª–∞—á–µ–Ω.\n"
        f"–ü–æ–∫—É–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏–∏, –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.\n"
        f"–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏.\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üåü",
        parse_mode="HTML",
    )
    context.user_data.pop("cart_items", None)
    context.user_data.pop("order_id", None)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞."""
    try:
        application = Application.builder().token(TOKEN).build()

        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(pay, pattern="pay"))
        application.add_handler(CallbackQueryHandler(debug_pay, pattern="debug_pay"))
        application.add_handler(CallbackQueryHandler(confirm_quantity, pattern=r"^(confirm|cancel).*"))
        application.add_handler(PreCheckoutQueryHandler(pre_checkout))
        application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()